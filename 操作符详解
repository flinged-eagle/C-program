算术操作符：
  + — * / %           %操作符只能作用于整数，返回的是整除后的余数
                      /操作符如果两个操作数都为整数，执行整数除法。而只要有浮点数执行的就是浮点数除法
移位操作符：
<<   左移操作符   >>   右移操作符

左移操作符 
移位规则： 左边抛弃、右边补0

右移操作符
移位规则：
右移运算分两种：
1. 逻辑移位 左边用0填充，右边丢弃 2. 算术移位 左边用原该值的符号位填充，右边丢弃

 警告⚠ ： 对于移位运算符，不要移动负数位，这个是标准未定义。
 
 位操作符：
 
 &   //按位与
 |   //按位或 
 ^   //按位异或 
 注：他们的操作数必须是整数
 
不能创建临时变量，实现两个数的交换
#include <stdio.h> 
int main() 
{    
  int a = 10; 
  int b = 20; 
  a = a^b;  
  b = a^b;  
  a = a^b;  
  printf("a = %d  b = %d\n", a, b);
  return 0;
 }

 求一个整数存储在内存中的二进制中1的个数。
#include <stdio.h> 
int main()
{    
  int num = -1; 
  int i = 0;    
  int count = 0;//计数 
  while(num)  
  {       
   count++;  
   num = num&(num-1);  
  }   
  printf("二进制中1的个数 = %d\n",count); 
  return 0; 
} 

赋值操作符：
  赋值
  复合赋值符 += -= *= /= %= >>= <<= &= |= ^=
  
单目操作符：

  !           逻辑反操作
  -           负值
  +           正值
  &           取地址
  sizeof      操作数的类型长度（以字节为单位）
  ~           对一个数的二进制按位取反
  --          前置、后置--
  ++          前置、后置++
  *           间接访问操作符(解引用操作符)
  (类型)       强制类型转换

关系操作符：
>
>= 
<
<= 
!=      用于测试“不相等”
==      用于测试“相等

逻辑操作符：
&&          逻辑与
||          逻辑或

条件操作符：
exp1 ? exp2 : exp3

逗号表达式：
逗号表达式，就是用逗号隔开的多个表达式。
逗号表达式，从左向右依次执行。
整个表达式的结果是最后一个表达式的结果。

下标引用、函数调用和结构成员：
1.[ ] 下标引用操作符 操作数：一个数组名 + 一个索引值
  arr[9]   arr 9 为两个操作数
2.( ) 函数调用操作符 接受一个或者多个操作数：第一个操作数是函数名，剩余的操作数就是传递给函数的参数。
3.访问一个结构的成员
 结构体.成员名 
 结构体指针->成员名
 
表达式求值： 
表达式求值的顺序一部分是由操作符的优先级和结合性决定。
同样，有些表达式的操作数在求值的过程中可能需要转换为其他类型。

隐式类型转换 
C的整型算术运算总是至少以缺省整型类型的精度来进行的。
为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为整型提升。
 
整形提升是按照变量的数据类型的符号位来提升的
负数的整形提升：
    char c1 = -1;
    变量c1的二进制位(补码)中只有8个比特位：（一个字节）
    1111111 
    因为 char 为有符号的 char 所以整形提升的时候，高位补充符号位，即为1（4个字节）
    提升之后的结果是： 11111111111111111111111111111111
正数的整形提升：
    char c2 = 1; 
    变量c2的二进制位(补码)中只有8个比特位：
    00000001 
    因为 char 为有符号的 char 所以整形提升的时候，高位补充符号位，即为0
    提升之后的结果是： 00000000000000000000000000000001
    
 无符号整形提升，高位补0
 
 操作符的属性： 
复杂表达式的求值有三个影响的因素。
1. 操作符的优先级 
2. 操作符的结合性
3. 是否控制求值顺序。
两个相邻的操作符先执行哪个？
取决于他们的优先级。如果两者的优先级相同，取决于他们的结合性。

    
 




